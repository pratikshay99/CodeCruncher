Q.1) How to reverse the string 
import java.util.*;
import java.io.*;
import java.lang.*;
class Test{

	public static void main(String args[]){
	
	String str = "saurabh";
	String revestr="";
	// using loop
	/*for(int i=0; i<str.length(); i++){
		
		char c = str.charAt(i);
		
		revestr=c+revestr;
		}
	System.out.println(revestr);
	
	// using build in function
	
	StringBuffer buffstr = new StringBuffer(str);
	buffstr.reverse();
	System.out.println(buffstr);
	
	
	// using array
	char arr [] = str.toCharArray();
		for(int i = arr.length -1 ; i>=0 ; i--){
			
			System.out.print(arr[i]);
		}
	*/
	char arr [] = str.toCharArray();
	List<Character> l = new ArrayList<Character>();
	for(char c : arr){
		l.add(c);
  }
  Collections.reverse(l);
  
  l.stream().forEach(c->System.out.print(c));
  
  // iterating collection through for each method
 // l.forEach(c->System.out.print(c));
  
  // iterating collection through for each loop
  for(Character c : l){
	 // System.out.print(c);
  }
  
  // iterating collection through iterator
  Iterator<Character> it = l.iterator();
  while(it.hasNext()){
	 // System.out.print(it.next());
		}
	}
}


Q.2 ) Fibonacci series 
class Test{

	public static void main(String args[]){
		int a = 0 , b=1 , c=0;
		int num=10;
		for(int i=2 ; i<=num ; i++){
			c = a+b;
			System.out.println(c);
			a=b;
			b=c;
			
		}
	
		
		
	}
}


Q.3 ) To get Employee  Name  from list of employees and sort accordingly 
		
		Test obj = new Test("Saurabh", "jadhav");
        Test obj2 = new Test("Rohit", "jadhav");
        List<Test> listemp = new ArrayList<Test>();
        listemp.add(obj);
        listemp.add(obj2);

        List<String> name = new ArrayList<String>();
        name = listemp.stream().map(Test::getName).sorted().collect(Collectors.toList());


        name.forEach(x-> System.out.println(x));

Q.4 ) write a function that takes in a string of lower case english alphabet letters and return the index of the strings first non repeating character.


    public static int indexOfFirst(String str){

        for (int i = 0 ; i < str.length(); i++){
            boolean isRepeated = false;
                for (int j= i+1; j<str.length();j++){
                    if(str.charAt(i) == str.charAt(j)){
                        isRepeated= true;
                        break;
                    }
                }

                if(!isRepeated){
                    return i;
                }
            }
        return -1;
    }


import java.util.HashMap;

public class FirstNonRepeatingChar {
    public static int firstNonRepeatingCharIndex(String str) {
        // Create a hashmap to store character frequencies and their positions
        HashMap<Character, Integer> charCount = new HashMap<>();

        // Traverse the string to populate the hashmap
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }

        // Traverse the string again to find the first non-repeating character
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (charCount.get(c) == 1) {
                return i;
            }
        }

        // If no non-repeating character is found, return -1
        return -1;
    }

    public static void main(String[] args) {
        String input = "abcdefghijklmnopqrstuvwxyzabcdef";
        int index = firstNonRepeatingCharIndex(input);

        if (index != -1) {
            System.out.println("The first non-repeating character is at index: " + index);
            System.out.println("The character is: " + input.charAt(index));
        } else {
            System.out.println("No non-repeating character found in the string.");
        }
    }
}

Q.5 Compare to string arrays

class Test{

	public static void main(String args[]){
	
			 //compare two string arrays
        String arr [] ={"GFG" ,"GEEKS","FOR"};
        String arr1 [] ={"gfg" ,"geeks","for"};
        boolean status = true;
        for (int i =0;i < arr.length ; i++){
            if(!arr[i].equalsIgnoreCase(arr1[i])) {
                status = false;
                break;
            }
        }
	===================================================
		String arr [] ={"GFG" ,"GEEKS","FOR"};
		String arr1 [] ={"gfg" ,"geeks","for"};
		
		if(Arrays.equals(arr,arr1,String::compareToIgnoreCase)){
			System.out.println("Yes");	
		}else{
			
			System.out.println("No");
		}

	}
}

Q.6 // Java program to Count the Occurrence 
// of numbers using Hashmap 
import java.util.*; 

class HelloWorld { 

 for(int i =0 ; i < arr.length ; i++){
            int count =0;
            for (int j = 0 ; j< arr.length ; j++){
                if(arr[i] == arr[j]){
                    count++;
                }
            }
            //System.out.println("Element:"+arr[i]+" "+"Occurance::"+count);
        }
	public static void main(String[] args) 
	{ 
		int a[] = { 1, 13, 4, 1, 41, 31, 31, 4, 13, 2 }; 

		// put all elements in arraylist 
		ArrayList<Integer> aa = new ArrayList(); 
		for (int i = 0; i < a.length; i++) { 
			aa.add(a[i]); 
		} 

		HashMap<Integer, Integer> h = new HashMap(); 

		// counting occurrence of numbers 
		for (int i = 0; i < aa.size(); i++) { 
			h.putIfAbsent(aa.get(i), Collections.frequency( 
										aa, aa.get(i))); 
		} 
		System.out.println(h); 
	} 
}

//dinesh logic 
public static void main(String[] args) {
        int a[] = { 1, 13, 4, 1, 41, 31, 31, 4, 13, 2 }; 
        System.out.println("Try programiz.pro" + getindex(a));
    }
    
    public static int getindex(int[] a){
        Map<Integer,Integer> countMap=new HashMap<>();
        
        for(int i=0;i< a.length;i++){
            
            countMap.put(a[i],countMap.getOrDefault(a[i],0)+1);
        }
        System.out.println(countMap);
        // for(int i=0;i<name.length();i++){
        //     if(countMap.get(name.charAt(i))==1){
        //         return 0;
        //     }
        // }
       return -1;
    }


Q.7 ) Count the Number of matching characters in a pair of strings

import java.util.HashMap;
import java.util.Map;

public class GFG {
	// Function to count the number of matching pairs
	
	
	 String com1 = "hello";
        char arr1 [] = com1.toCharArray();
        String com2 ="hills";
        char arr2 [] =com2.toCharArray();

        List<Character> count = new ArrayList<>();


        for (int i =0 ; i< com1.length();i++){
            for (int j = 0 ; j <com2.length() ; j++){
                if(arr1[i] == arr2[j]){
                    count.add(arr1[i]);
                    break;
                }
            }
        }
        System.out.println(count.size());
	
	=========================================================================
	public static int countMatchingCharacters(String str1, String str2) {
		// Create a HashMap to store character frequencies in str1
		Map<Character, Integer> charCount = new HashMap<>();
		int count = 0;

		// Count characters in str1
		for (char c : str1.toCharArray()) {
			charCount.put(c, charCount.getOrDefault(c, 0) + 1);
		}

		// Check for matching characters in str2
		for (char c : str2.toCharArray()) {
			if (charCount.containsKey(c) && charCount.get(c) > 0) {
				count++;
				charCount.put(c, charCount.get(c) - 1);
			}
		}

		return count;
	}

	public static void main(String[] args) {
		String str1 = "abcdef";
		String str2 = "defghia";

		// Function call
		int matchingPairs = countMatchingCharacters(str1, str2);
		System.out.println("Number of matching pairs: " + matchingPairs);
	}
}

q.8 ) get day of week 

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class DayOfWeekExample {

    public static String getDay(String dateString) {
        // Parse the input string to LocalDate
        LocalDate date = LocalDate.parse(dateString, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        // Get the DayOfWeek enum from the LocalDate
        DayOfWeek dayOfWeek = date.getDayOfWeek();

        // Convert DayOfWeek enum to a string representation (e.g., "MONDAY")
        String dayOfWeekString = dayOfWeek.toString();

        // Convert to title case (e.g., "Monday")
        return dayOfWeekString.substring(0, 1) + dayOfWeekString.substring(1).toLowerCase();
    }

    public static void main(String[] args) {
        // Example usage
        String dateString = "2023-11-26";
        String dayOfWeek = getDay(dateString);
        System.out.println("Day of the week for " + dateString + " is: " + dayOfWeek);
    }
}
Q.9 ) Max salary from list of employees

public static void main(String[] args) {

        List<Test> test = new ArrayList<Test>();
        test.add(new Test("Saurabh" ,"Jadhav ",10000));
        test.add(new Test("Saurabh" ,"Yadhav ",20000));
        test.add(new Test("Saurabh" ,"Patil ",30000));

      double salary =  test.stream().mapToDouble(Test::getSalary).max().orElse(0);
        System.out.println(salary);
		
		
		==========================================
		
		   List<Employee> emp = new ArrayList<>();
        emp.add(new Employee("Saurabh","Jadhav",5000));
        emp.add(new Employee("Aakash","Patil" , 2000));
        emp.add(new Employee("Bany" ,"Jha" ,10000));
        emp.add(new Employee("Prathmesh","Jadhav",1500));

       emp.sort(Comparator.comparingInt(Employee::getSalary).reversed());
        System.out.println("Max salary::"+emp.get(0).getSalary());
        System.out.println("Second max salary::"+emp.get(1).getSalary());

    }
	
Q.10 )  sum of array using stream 

		int num [] = {30,20,10};
        int sum = Arrays.stream(num).sum();
        System.out.println(sum);	

Q.11 ) 	Max element in array

		int maxNum = Arrays.stream(num).max().getAsInt();
        System.out.println("maxNum :"+maxNum);	

Q.12 ) Average of Arrays
		int numAvg = (int)Arrays.stream(num).average().getAsDouble();
        System.out.println(numAvg);
		
		
Q.13 ) Print first n natural numbers with given digit d.
		   Stream.iterate(1,x->x+1)
                .filter(x ->x.toString().contains("5"))
                .limit(10)
                .forEach(System.out::println);
Q.14 ) Print strings that begin with "a" and ends with "c" in lexicographic order.

				Arrays.stream(arr)
                .filter(x->x.startsWith("a"))
                .filter(x->x.endsWith("c"))
                .sorted().
                forEach(System.out::println);
				
Q.15 ) Print the average of 3 students marks in a class Student.
 List<Student> list = new ArrayList<>();

      list.add(new Student(1,70,"saurabh"));
      list.add(new Student(2,80,"pratik"));
      list.add(new Student(3,50,"Rohit"));


      int avg =(int) list.stream().mapToInt(Student::getMarks).average().getAsDouble();
        System.out.println(avg);
		
	The Stream mapToInt(ToIntFunction mapper) returns an IntStream consisting of the results of applying the given function to the elements of this stream. This is an intermediate operation.	

Q.16 ) You are given a number k and a array numbers that contains integers. You need to return array of numbers that are less than k.

int arr []  = {54, 43, 2, 1, 5};

      //  Arrays.stream(arr).filter(x -> x < 6).forEach(System.out::println);
	  //Dinesh logic
	  //int arr2[]=Arrays.stream(arr).filter(x -> x < 6).toArray();

        int count = 0;
        int index = 0;
        int k = 6;

        for (int i = 0 ; i < arr.length ; i++){
            if(arr[i] < k ){
                index++;
            }
        }
        int lessArray [] = new int[index];
        for (int i = 0 ; i < arr.length ; i++){
            if(arr[i] < k ){
                lessArray[count] = arr[i];
                count++;
            }

           for (int x : lessArray){
               System.out.println(x);
           }

Q.17 ) Sort array in asc order 
		for(int i = 0 ; i< arr.length ; i++){
            for(int j = i+1 ; j < arr.length ; j++){
                if(arr[i] > arr[j]){
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
            System.out.println(arr[i]);
        }

Q.18 ) print distict element in array

   //Arrays.sort(arr);
     Set<Integer> set = new HashSet<>();
     for (int i = 0; i < arr.length ; i++){
         set.add(arr[i]);
     }

    // set.stream().forEach(System.out::println);
	
	   // print distinct element in array

        int arr1 [] = {1,2,5,1,5};

        for(int i = 0; i< arr1.length ; i++){
            boolean count =false;
            for(int j = 0 ; j< i ; j++){
                if(arr1[i] == arr1[j]){
                   count = true;
                   break;
                }
            }

            if(!count){
                //System.out.println("Dis Ele::"+arr1[i]);
            }
        }
	
Q.19 ) String palindrome

String name = "nitin";
        //palindrome
        String rev = "";
        for(int i = 0 ; i < name.length() ; i++){
            char c = name.charAt(i);
            rev = c + rev;
        }
        System.out.println(rev);

        if(name.equals(rev)){
            System.out.println("String is palidrome");
        }else {
            System.out.println("String is  not palidrome");
        }	
		
Q.20 ) Unique Substring 

    static public int uniqueSubString(String str){
        HashSet<String> count = new HashSet<>();
        for (int i = 0 ; i < str.length();i++){
            for(int j = i+1 ; j<=str.length() ; j++){
                count.add(str.substring(i,j));
            }
        }
        return count.size();
    }

Q.21 ) Intersection of Arrays 

    public  static  Set<Integer> intersectionOfArray(int arr1[] , int arr2[]){
        // [1,2,4,3]
        // [2,5,4,8]
        Set<Integer> set = new HashSet<>();

        for (int i = 0 ; i < arr1.length ; i++){
            for (int j = 0 ;  j < arr2.length ; j++){
                if(arr1[i] == arr2[j]){
                   set.add(arr1[i]);
                }
            }
        }

        return set;
    }	
	
	
	==============================================
	
	Set<Integer> set = new HashSet<>();
     for (int i = 0 ; i<arr.length ;i++){
         set.add(arr[i]);
     }

     Set<Integer> set1 = new HashSet<>();
     for (int i =0 ; i<arr1.length ; i++){
         set1.add(arr1[i]);
     }
     set.retainAll(set1);

     set.forEach(x-> System.out.println(x));

Q.22 )  You are given an array of distinct integers and a sum. Check if there's a pair with the given sum in the array.

Set<Integer> set = new HashSet<>();
        int count = 0 ;
        for(int i = 0; i < arr.length ; i++){

            int complement = sum - arr[i];
            if(set.contains(complement)){
                count++;
            }
            set.add(arr[i]);
        }



        return count;

Q.23) Union of Arrays 

		//Using Hash set addAll method 
		  //Your code here
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        
        for(int i = 0 ; i < a.length ; i++){
            set1.add(a[i]);
        }
        
         for(int i = 0 ; i < b.length ; i++){
            set2.add(b[i]);
        }
        
        set1.addAll(set2);
        return set1.size();

Q.24 ) // : Given a string check if it is Pangram or not. A pangram is a sentence containing every letter in the English alphabet.

public class PanagranOfString {

    public static  boolean checkPanagram(String str){
        int n =  str.length();

        if(n < 26){
            return  false;
        }

        boolean visited [] = new boolean[26];

        for(int i = 0 ; i < n ;i++){
            char c = str.charAt(i);
            if(c >= 'a' && c <= 'z'){
                visited[ c - 'a'] = true;
            }

            if( c>= 'A' && c <= 'Z'){
                visited [c -'A'] = true;
            }
        }

        for(int i = 0 ; i < 26 ; i++){
            if(visited[i] == false){
                return false;
            }
        }

        return  true;
    }

    public static void main(String[] args) {
       String str = "The quick brown fox jumps over \n" +
               "the lazy dog";

        boolean res = checkPanagram(str);
        System.out.println("Res::"+res);
    }
}

Q.25 )   //Function is to check whether two strings are anagram of each other or not.
    public static boolean isAnagram(String a,String b)
    {
        
        // Your code here
        char arr [] = a.toCharArray();
        Arrays.sort(arr);
         String s1 = new String(arr);
         
         char arr1 [] =  b.toCharArray();
         Arrays.sort(arr1);
         String s2 = new String(arr1);
         
         if(s1.equals(s2)){
             return true;
         }
         
         return false;
        
    }

Q.26 ) 
// function should find if the string p is
// in the string s. Return the starting index
// of the string p in s. Return -1 if the
// string doesnot exists in s.
public static int findPattern(String s, String p){
    // code here
    
    for(int i =0 ; i < s.length() - p.length() + 1 ; i++){
        
        if(s.substring(i , i+p.length()).equals(p)){
            return i ;
        }
    }
    return -1;
}

Q.27 ) Given an ArrayList arr of N positive integers. The task is to find the maximum for every adjacent pairs in the ArrayList.


ArrayList<Integer> maxValues = new ArrayList<>();
    
    for(int i = 0 ; i < arr.size() - 1  ; i++){
        int max = Math.max(arr.get(i),arr.get(i+1));
        maxValues.add(max);
    }
    
    return maxValues;	
	
Q.28 ) Given an ArrayList arr of size N, find maximum and minimum elements in the ArrayList.
	List<Integer> list = new ArrayList<>();
        list.add(10);
        list.add(20);
        list.add(30);
	
	Collections.max(arr);
	Collections.min(arr);
	
	Optional<Integer> maxElementOptional = list.stream().max((a, b) -> a.compareTo(b));
	Optional<Integer> maxEle =list.stream().max(Integer::compareTo);

Q.29 )  Given an array of integers, find and print all those elements of an array which are repeated.

public static void main(String[] args) {
        int arr [] = {10, 8, 10, 7, 7, 6};
        Set<Integer> set = new HashSet<>();
        for(int i =0 ; i < arr.length ; i++){
            if(set.contains(arr[i])){
                System.out.println("Repeating Ele ::"+arr[i]);
            }else {
                set.add(arr[i]);
            }
        }
    }

Q 30 ) //Given an array of N items, and a value K. The thief will pick K
// items such that he has maximum value combined for all picked items.
// That is, sum of values of all K items picked by the thief must be maximum.

     Arrays.sort(arr ,Collections.reverseOrder());
        int sum = 0;
        for (int i = 0 ; i < K ; i++){
            sum+=arr[i];
        }

        return sum;
    }
	
Q.31 )Java program that sorts a given list in a way that ensures each element at an even index is greater than its adjacent element at the odd index: input is 1,2 ,3,4,5 and output 2,1,4,3,5


    public  static void evenOddSort(List<Integer>list){
        Collections.sort(list);
        for(int i = 1; i < list.size() -1 ; i+=2){
            int temp = list.get(i);
            list.set(i ,list.get(i-1));
            list.set(i-1 , temp);
        }
    }
    public static void main(String[] args) {

        List<Integer> list = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7));
        evenOddSort(list);

        list.forEach(x-> System.out.print(x+" "));	
Q.32 )find all the duplicate words in string?
find the word with Max duplicate


 String str = "Java is love programming langague i java";
        String arr [] = str.toLowerCase().split(" ");
        Map<String , Integer> map = new HashMap<>();
        for(int i = 0 ; i < arr.length  ; i++){
            map.put(arr[i] , map.getOrDefault(arr[i] ,0) +1);
        }

        String maxRepeat = "";
        int maxfrequency =0;
       for(String words : map.keySet()){
           int frequency = map.get(words);
           if(frequency > maxfrequency){
               maxfrequency = frequency;
               maxRepeat = words;
              // System.out.println(words);
           }
       }

        System.out.println(maxRepeat);
    }