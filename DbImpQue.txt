Q. Why did Oracle release a new version of Java like Java 8?
The main theme of Java 8 is support for functional programming. With increase in Database size and growth of multi-code CPU servers, there is need for 
Java to support such large-scale systems.

The main difference between WHERE and HAVING clause is that the WHERE clause allows you to filter data from specific rows (individual rows) from a table based on certain conditions. In contrast, the HAVING clause allows you to filter data from a group of rows in a query based on conditions involving aggregate values.3

ACID: ensure the reliability and integrity of database transactions:

Atomicity (single unit of work, indivisible unit of transactions)-either all operations in transaction completed successfully or none of them are
Consistency (transactions bring the DB from one consistent state to another, not violate any integrity or business rule// non negative age)
Isolation (transactions are isolated from each other- multiple transactions can run concurrently without interfering with each other)
Durability (committed transactions are permanent and survive system failures)

UNION combines columns of 2 or more table and removes duplicates from the result set.
UNION ALL: combines the result sets without removing duplicates, resulting in a faster

5. What types of SQL commands (or SQL subsets) do you know?
Data Definition Language (DDL) – to define and modify the structure of a database.
Data Manipulation Language (DML) – to access, manipulate, and modify data in a database.
Data Control Language (DCL) – to control user access to the data in the database and give or revoke privileges to a specific user or a group of users.
Transaction Control Language (TCL) – to control transactions in a database.
Data Query Language (DQL) – to perform queries on the data in a database to retrieve the necessary information from it.
6. Give some examples of common SQL commands of each type.
DDL: CREATE, ALTER TABLE, DROP, TRUNCATE, and ADD COLUMN
DML: UPDATE, DELETE, and INSERT
DCL: GRANT and REVOKE
TCL: COMMIT, SET TRANSACTION, ROLLBACK, and SAVEPOINT
DQL: – SELECT

Summary
1NF: No repeating groups, all data atomic(each col contains only atomic values)
2NF: No partial dependencies on a primary key.
3NF: No transitive dependencies.


Normalization Forms
First Normal Form (1NF)

Objective: Ensure that all columns contain atomic (indivisible-that cannot be divided or split into smaller pieces) values and each entry in a column is of the same type.

Key Points:
No repeating groups or arrays in a single column.
Each table must have a primary key.
Example:
Original table:

StudentID	Name	Subjects
1	Alice	Math, Science
2	Bob	History
In 1NF:

StudentID	Name	Subject
1	Alice	Math
1	Alice	Science
2	Bob	History

Second Normal Form (2NF)
Objective: Eliminate partial dependencies; all non-key attributes must depend on the whole primary key.

Key Points:
The table must be in 1NF.
If a table has a composite key, no non-key attribute should depend on part of that key.
Example:
After applying 1NF:

StudentID	Subject	Class
1	Math	10A
1	Science	10A
2	History	10B
Here, “Class” depends only on “StudentID,” not the combination. We split into:

Students Table:

StudentID	Class
1	10A
2	10B
Subjects Table:

StudentID	Subject
1	Math
1	Science
2	History
Third Normal Form (3NF)

Objective: Remove transitive dependencies; non-key attributes should not depend on other non-key attributes.

Key Points:

The table must be in 2NF.
No non-key attribute should depend on another non-key attribute.
Example:
If we add a teacher:

Class	Teacher
10A	Mr. Smith
10B	Ms. Johnson
Here, "Teacher" depends on "Class," not directly on "StudentID." We create a new table:

Classes Table:

Class	Teacher
10A	Mr. Smith
10B	Ms. Johnson
Summary
1NF: No repeating groups, all values atomic.
2NF: Remove partial dependencies on composite keys.
3NF: Remove transitive dependencies

Write a query to display the first 50% of records and the last 50% records from the Employee_detail table.
-- Fetch the first 50%
SELECT *
FROM Employee_detail
LIMIT (SELECT COUNT(*) / 2 FROM Employee_detail);

-- Fetch the last 50%
SELECT *
FROM Employee_detail
ORDER BY id DESC  -- Assuming 'id' is your primary key
LIMIT (SELECT COUNT(*) / 2 FROM Employee_detail);

Q6:- Write a SQL query to fetch distinct/unique records with or without using distinct keywords.
Solution :

Query using a Distinct keyword

select distinct * from Employee_detail;
Query without using the Distinct keyword

select * from Employee_detail union select * from Employee_detail;

Simple Query to Remove Duplicates
Assuming you want to keep one copy based on some columns (e.g., name and department), you can do this:

sql
Copy code
DELETE FROM Employee_detail
WHERE id NOT IN (
    SELECT MIN(id)
    FROM Employee_detail
    GROUP BY name, department  -- Replace with your actual columns for duplicates
);
Explanation:
SELECT MIN(id): This finds the smallest id for each group of duplicates (based on name and department).
DELETE: This deletes all rows that do not have the minimum id, effectively keeping one instance of each duplicate.
Example
If your Employee_detail table looks like this:

id	name	department
1	Alice	HR
2	Bob	IT
3	Alice	HR
4	Charlie	IT
After Running the Query
Your table will now look like this:

id	name	department
1	Alice	HR
2	Bob	IT
4	Charlie	IT
Key Points:
Replace name and department with the actual columns you want to check for duplicates.
Ensure that id is your primary key or a unique identifier.


Parameter	DELETE	DROP	TRUNCATE
Type	DML	DDL	DDL
Purpose	Deletes specific rows based on condition	Deletes the entire table or database	Deletes all rows but retains table structure
Syntax	DELETE FROM table_name WHERE condition;	DROP TABLE table_name;	TRUNCATE TABLE table_name;
Rollback Support	Can be Rollback	Cannot be Rollback	Cannot be Rollback
Data Removal	Removes selected rows	Removes table and data completely	Removes all rows
Efficiency	Slower, as each row is processed individually	Instant removal, affecting schema	Faster than DELETE but slower than DROP
Triggers	Fires triggers	Does not fire triggers	Does not fire triggers


https://www.geeksforgeeks.org/sql-query-interview-questions/
interPrep
https://www.simplilearn.com/top-sql-interview-questions-and-answers-article
https://www.datacamp.com/blog/top-sql-interview-questions-and-answers-for-beginners-and-intermediate-practitioners

https://www.interviewbit.com/sql-interview-questions/

Queries:
https://www.analyticsvidhya.com/blog/2022/10/top-10-interview-queries-on-sql/
